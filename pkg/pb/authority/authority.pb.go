// Code generated by protoc-gen-go. DO NOT EDIT.
// source: authority.proto

package AuthorityPb

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type Empty struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Empty) Reset()         { *m = Empty{} }
func (m *Empty) String() string { return proto.CompactTextString(m) }
func (*Empty) ProtoMessage()    {}
func (*Empty) Descriptor() ([]byte, []int) {
	return fileDescriptor_6a5a0640cd66a638, []int{0}
}

func (m *Empty) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Empty.Unmarshal(m, b)
}
func (m *Empty) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Empty.Marshal(b, m, deterministic)
}
func (m *Empty) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Empty.Merge(m, src)
}
func (m *Empty) XXX_Size() int {
	return xxx_messageInfo_Empty.Size(m)
}
func (m *Empty) XXX_DiscardUnknown() {
	xxx_messageInfo_Empty.DiscardUnknown(m)
}

var xxx_messageInfo_Empty proto.InternalMessageInfo

type Array struct {
	Data                 []string `protobuf:"bytes,1,rep,name=data,proto3" json:"data,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Array) Reset()         { *m = Array{} }
func (m *Array) String() string { return proto.CompactTextString(m) }
func (*Array) ProtoMessage()    {}
func (*Array) Descriptor() ([]byte, []int) {
	return fileDescriptor_6a5a0640cd66a638, []int{1}
}

func (m *Array) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Array.Unmarshal(m, b)
}
func (m *Array) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Array.Marshal(b, m, deterministic)
}
func (m *Array) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Array.Merge(m, src)
}
func (m *Array) XXX_Size() int {
	return xxx_messageInfo_Array.Size(m)
}
func (m *Array) XXX_DiscardUnknown() {
	xxx_messageInfo_Array.DiscardUnknown(m)
}

var xxx_messageInfo_Array proto.InternalMessageInfo

func (m *Array) GetData() []string {
	if m != nil {
		return m.Data
	}
	return nil
}

type Arrays struct {
	List                 []*Array `protobuf:"bytes,1,rep,name=list,proto3" json:"list,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Arrays) Reset()         { *m = Arrays{} }
func (m *Arrays) String() string { return proto.CompactTextString(m) }
func (*Arrays) ProtoMessage()    {}
func (*Arrays) Descriptor() ([]byte, []int) {
	return fileDescriptor_6a5a0640cd66a638, []int{2}
}

func (m *Arrays) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Arrays.Unmarshal(m, b)
}
func (m *Arrays) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Arrays.Marshal(b, m, deterministic)
}
func (m *Arrays) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Arrays.Merge(m, src)
}
func (m *Arrays) XXX_Size() int {
	return xxx_messageInfo_Arrays.Size(m)
}
func (m *Arrays) XXX_DiscardUnknown() {
	xxx_messageInfo_Arrays.DiscardUnknown(m)
}

var xxx_messageInfo_Arrays proto.InternalMessageInfo

func (m *Arrays) GetList() []*Array {
	if m != nil {
		return m.List
	}
	return nil
}

type Target struct {
	To                   string   `protobuf:"bytes,1,opt,name=to,proto3" json:"to,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Target) Reset()         { *m = Target{} }
func (m *Target) String() string { return proto.CompactTextString(m) }
func (*Target) ProtoMessage()    {}
func (*Target) Descriptor() ([]byte, []int) {
	return fileDescriptor_6a5a0640cd66a638, []int{3}
}

func (m *Target) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Target.Unmarshal(m, b)
}
func (m *Target) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Target.Marshal(b, m, deterministic)
}
func (m *Target) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Target.Merge(m, src)
}
func (m *Target) XXX_Size() int {
	return xxx_messageInfo_Target.Size(m)
}
func (m *Target) XXX_DiscardUnknown() {
	xxx_messageInfo_Target.DiscardUnknown(m)
}

var xxx_messageInfo_Target proto.InternalMessageInfo

func (m *Target) GetTo() string {
	if m != nil {
		return m.To
	}
	return ""
}

type Batch struct {
	To                   string   `protobuf:"bytes,1,opt,name=to,proto3" json:"to,omitempty"`
	Operate              []string `protobuf:"bytes,2,rep,name=operate,proto3" json:"operate,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Batch) Reset()         { *m = Batch{} }
func (m *Batch) String() string { return proto.CompactTextString(m) }
func (*Batch) ProtoMessage()    {}
func (*Batch) Descriptor() ([]byte, []int) {
	return fileDescriptor_6a5a0640cd66a638, []int{4}
}

func (m *Batch) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Batch.Unmarshal(m, b)
}
func (m *Batch) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Batch.Marshal(b, m, deterministic)
}
func (m *Batch) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Batch.Merge(m, src)
}
func (m *Batch) XXX_Size() int {
	return xxx_messageInfo_Batch.Size(m)
}
func (m *Batch) XXX_DiscardUnknown() {
	xxx_messageInfo_Batch.DiscardUnknown(m)
}

var xxx_messageInfo_Batch proto.InternalMessageInfo

func (m *Batch) GetTo() string {
	if m != nil {
		return m.To
	}
	return ""
}

func (m *Batch) GetOperate() []string {
	if m != nil {
		return m.Operate
	}
	return nil
}

type Single struct {
	To                   string   `protobuf:"bytes,1,opt,name=to,proto3" json:"to,omitempty"`
	Operate              string   `protobuf:"bytes,2,opt,name=operate,proto3" json:"operate,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Single) Reset()         { *m = Single{} }
func (m *Single) String() string { return proto.CompactTextString(m) }
func (*Single) ProtoMessage()    {}
func (*Single) Descriptor() ([]byte, []int) {
	return fileDescriptor_6a5a0640cd66a638, []int{5}
}

func (m *Single) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Single.Unmarshal(m, b)
}
func (m *Single) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Single.Marshal(b, m, deterministic)
}
func (m *Single) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Single.Merge(m, src)
}
func (m *Single) XXX_Size() int {
	return xxx_messageInfo_Single.Size(m)
}
func (m *Single) XXX_DiscardUnknown() {
	xxx_messageInfo_Single.DiscardUnknown(m)
}

var xxx_messageInfo_Single proto.InternalMessageInfo

func (m *Single) GetTo() string {
	if m != nil {
		return m.To
	}
	return ""
}

func (m *Single) GetOperate() string {
	if m != nil {
		return m.Operate
	}
	return ""
}

type Determine struct {
	Ok                   bool     `protobuf:"varint,1,opt,name=ok,proto3" json:"ok,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Determine) Reset()         { *m = Determine{} }
func (m *Determine) String() string { return proto.CompactTextString(m) }
func (*Determine) ProtoMessage()    {}
func (*Determine) Descriptor() ([]byte, []int) {
	return fileDescriptor_6a5a0640cd66a638, []int{6}
}

func (m *Determine) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Determine.Unmarshal(m, b)
}
func (m *Determine) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Determine.Marshal(b, m, deterministic)
}
func (m *Determine) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Determine.Merge(m, src)
}
func (m *Determine) XXX_Size() int {
	return xxx_messageInfo_Determine.Size(m)
}
func (m *Determine) XXX_DiscardUnknown() {
	xxx_messageInfo_Determine.DiscardUnknown(m)
}

var xxx_messageInfo_Determine proto.InternalMessageInfo

func (m *Determine) GetOk() bool {
	if m != nil {
		return m.Ok
	}
	return false
}

type Resources struct {
	Role                 string   `protobuf:"bytes,1,opt,name=role,proto3" json:"role,omitempty"`
	Obj                  string   `protobuf:"bytes,2,opt,name=obj,proto3" json:"obj,omitempty"`
	Action               string   `protobuf:"bytes,3,opt,name=action,proto3" json:"action,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Resources) Reset()         { *m = Resources{} }
func (m *Resources) String() string { return proto.CompactTextString(m) }
func (*Resources) ProtoMessage()    {}
func (*Resources) Descriptor() ([]byte, []int) {
	return fileDescriptor_6a5a0640cd66a638, []int{7}
}

func (m *Resources) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Resources.Unmarshal(m, b)
}
func (m *Resources) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Resources.Marshal(b, m, deterministic)
}
func (m *Resources) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Resources.Merge(m, src)
}
func (m *Resources) XXX_Size() int {
	return xxx_messageInfo_Resources.Size(m)
}
func (m *Resources) XXX_DiscardUnknown() {
	xxx_messageInfo_Resources.DiscardUnknown(m)
}

var xxx_messageInfo_Resources proto.InternalMessageInfo

func (m *Resources) GetRole() string {
	if m != nil {
		return m.Role
	}
	return ""
}

func (m *Resources) GetObj() string {
	if m != nil {
		return m.Obj
	}
	return ""
}

func (m *Resources) GetAction() string {
	if m != nil {
		return m.Action
	}
	return ""
}

func init() {
	proto.RegisterType((*Empty)(nil), "AuthorityPb.Empty")
	proto.RegisterType((*Array)(nil), "AuthorityPb.Array")
	proto.RegisterType((*Arrays)(nil), "AuthorityPb.Arrays")
	proto.RegisterType((*Target)(nil), "AuthorityPb.Target")
	proto.RegisterType((*Batch)(nil), "AuthorityPb.Batch")
	proto.RegisterType((*Single)(nil), "AuthorityPb.Single")
	proto.RegisterType((*Determine)(nil), "AuthorityPb.Determine")
	proto.RegisterType((*Resources)(nil), "AuthorityPb.Resources")
}

func init() { proto.RegisterFile("authority.proto", fileDescriptor_6a5a0640cd66a638) }

var fileDescriptor_6a5a0640cd66a638 = []byte{
	// 473 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x9c, 0x94, 0xcf, 0x4e, 0xdb, 0x40,
	0x10, 0xc6, 0xf3, 0x87, 0x38, 0x64, 0x22, 0x91, 0x74, 0xa1, 0xd4, 0x0a, 0x17, 0xb4, 0x87, 0x8a,
	0x53, 0xd4, 0xa6, 0x07, 0x0e, 0x54, 0x45, 0x6e, 0x93, 0x86, 0xde, 0x90, 0x69, 0x1f, 0x60, 0x63,
	0x4f, 0xc1, 0xc5, 0x78, 0xa2, 0xdd, 0xa1, 0x52, 0xde, 0xa2, 0x8f, 0x5c, 0x79, 0x13, 0x3b, 0x38,
	0xd8, 0x51, 0xe0, 0xb6, 0xde, 0xdd, 0xdf, 0xf7, 0xcd, 0x7c, 0xb3, 0x32, 0xf4, 0xd4, 0x23, 0xdf,
	0x91, 0x8e, 0x78, 0x31, 0x9c, 0x6b, 0x62, 0x12, 0x5d, 0x2f, 0xdb, 0xb8, 0x9e, 0xc9, 0x36, 0xb4,
	0x26, 0x0f, 0x73, 0x5e, 0xc8, 0x13, 0x68, 0x79, 0x5a, 0xab, 0x85, 0x10, 0xb0, 0x17, 0x2a, 0x56,
	0x6e, 0xfd, 0xb4, 0x79, 0xd6, 0xf1, 0xed, 0x5a, 0x7e, 0x00, 0xc7, 0x1e, 0x1a, 0xf1, 0x1e, 0xf6,
	0xe2, 0xc8, 0xb0, 0x3d, 0xed, 0x8e, 0xc4, 0xf0, 0x89, 0xd6, 0xd0, 0x5e, 0xf1, 0xed, 0xb9, 0x74,
	0xc1, 0xf9, 0xa9, 0xf4, 0x2d, 0xb2, 0x38, 0x80, 0x06, 0x93, 0x5b, 0x3f, 0xad, 0x9f, 0x75, 0xfc,
	0x06, 0x93, 0xfc, 0x08, 0xad, 0xaf, 0x8a, 0x83, 0xbb, 0xcd, 0x03, 0xe1, 0x42, 0x9b, 0xe6, 0xa8,
	0x15, 0xa3, 0xdb, 0xb0, 0xde, 0xd9, 0xa7, 0x1c, 0x81, 0x73, 0x13, 0x25, 0xb7, 0x31, 0x6e, 0x67,
	0xea, 0x4f, 0x99, 0x13, 0xe8, 0x8c, 0x91, 0x51, 0x3f, 0x44, 0x89, 0xc5, 0xe8, 0xde, 0x62, 0xfb,
	0x7e, 0x83, 0xee, 0xe5, 0x0f, 0xe8, 0xf8, 0x68, 0xe8, 0x51, 0x07, 0x68, 0xd2, 0x86, 0x35, 0xc5,
	0xb8, 0x52, 0xb5, 0x6b, 0xd1, 0x87, 0x26, 0xcd, 0xfe, 0xac, 0x34, 0xd3, 0xa5, 0x38, 0x06, 0x47,
	0x05, 0x1c, 0x51, 0xe2, 0x36, 0xed, 0xe6, 0xea, 0x6b, 0xf4, 0x6f, 0x1f, 0xfa, 0x79, 0x08, 0x37,
	0xa8, 0xff, 0x46, 0x01, 0x8a, 0x73, 0xe8, 0x4e, 0x91, 0xbd, 0x38, 0xf6, 0x29, 0x4e, 0x1d, 0x0a,
	0x31, 0xd9, 0xbc, 0x07, 0x25, 0xd1, 0xc9, 0x9a, 0x38, 0x07, 0x18, 0x63, 0x8c, 0x8c, 0x29, 0x28,
	0x0e, 0x0b, 0x77, 0x96, 0x79, 0x0e, 0x4a, 0xc4, 0x64, 0x4d, 0x7c, 0x86, 0xde, 0x14, 0xd9, 0xda,
	0x7d, 0x27, 0xfd, 0xcb, 0xa0, 0xde, 0x85, 0xce, 0x6c, 0x2f, 0xa0, 0xe7, 0x85, 0x61, 0x81, 0x2e,
	0x5e, 0xb4, 0x13, 0xab, 0xb0, 0xbe, 0x84, 0x83, 0x2b, 0x65, 0x52, 0xb8, 0xdc, 0x79, 0x39, 0xba,
	0xc1, 0x71, 0x61, 0x33, 0x9f, 0x8d, 0xac, 0x89, 0x2f, 0xf0, 0x66, 0xdd, 0xf4, 0x56, 0x8d, 0xf2,
	0x02, 0xf2, 0xd0, 0x5e, 0x0a, 0x5e, 0x82, 0x58, 0x1b, 0x9b, 0x57, 0x38, 0x2f, 0x53, 0x4f, 0xa9,
	0x94, 0x2e, 0x99, 0x59, 0x29, 0x9d, 0xa5, 0x3e, 0x86, 0x23, 0x2f, 0x0c, 0xaf, 0xd3, 0x1c, 0x8c,
	0x89, 0x28, 0xc9, 0x0a, 0x28, 0x26, 0x95, 0x3f, 0xd4, 0x8a, 0x1a, 0xbe, 0xc1, 0xdb, 0x29, 0xf2,
	0x5a, 0x65, 0x7b, 0x1f, 0x87, 0xcf, 0x2b, 0x31, 0x56, 0xe4, 0xdd, 0x32, 0x89, 0xe7, 0xd5, 0xec,
	0xfe, 0x10, 0x26, 0xe0, 0x6e, 0x8a, 0xbc, 0x2e, 0xd4, 0xfe, 0xa6, 0x8c, 0x28, 0x09, 0xb0, 0x82,
	0x1e, 0xc3, 0xd1, 0x95, 0x32, 0xbb, 0xb5, 0x51, 0xfd, 0x24, 0x2f, 0xa0, 0x3d, 0x49, 0x7e, 0x93,
	0x0e, 0xb0, 0x72, 0x1a, 0x95, 0xf0, 0xcc, 0xb1, 0xff, 0xd9, 0x4f, 0xff, 0x03, 0x00, 0x00, 0xff,
	0xff, 0x65, 0xd7, 0x64, 0x2d, 0x7a, 0x05, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// AuthorityServiceClient is the client API for AuthorityService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type AuthorityServiceClient interface {
	//  获取角色列表 全部
	GetAllRoles(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Array, error)
	//  删除角色
	DeleteRole(ctx context.Context, in *Target, opts ...grpc.CallOption) (*Empty, error)
	//  获取用户的所有角色
	GetRolesForUser(ctx context.Context, in *Target, opts ...grpc.CallOption) (*Array, error)
	//  给用户批量添加角色
	AddRolesForUser(ctx context.Context, in *Batch, opts ...grpc.CallOption) (*Empty, error)
	//  确定用户是否具有角色
	HasRoleForUser(ctx context.Context, in *Single, opts ...grpc.CallOption) (*Determine, error)
	//  删除用户的指定角色
	DeleteRoleForUser(ctx context.Context, in *Single, opts ...grpc.CallOption) (*Empty, error)
	//  删除用户
	DeleteUser(ctx context.Context, in *Single, opts ...grpc.CallOption) (*Empty, error)
	//  删除用户的全部角色
	DeleteRolesForUser(ctx context.Context, in *Single, opts ...grpc.CallOption) (*Empty, error)
	//  获取角色下的所有用户
	GetUsersForRole(ctx context.Context, in *Single, opts ...grpc.CallOption) (*Array, error)
	//  给角色添加权限
	AddPermissionForUser(ctx context.Context, in *Resources, opts ...grpc.CallOption) (*Empty, error)
	//  获取角色下全部权限
	GetPermissionsForUser(ctx context.Context, in *Single, opts ...grpc.CallOption) (*Arrays, error)
	//  删除角色下的指定权限
	DeletePermissionForUser(ctx context.Context, in *Batch, opts ...grpc.CallOption) (*Empty, error)
	//  删除角色的全部权限
	DeletePermissionsForUser(ctx context.Context, in *Single, opts ...grpc.CallOption) (*Empty, error)
	//  删除权限
	DeletePermission(ctx context.Context, in *Array, opts ...grpc.CallOption) (*Empty, error)
	//  判断角色是否有权限
	HasPermissionForUser(ctx context.Context, in *Batch, opts ...grpc.CallOption) (*Determine, error)
	//  判断用户对资源有没有权限
	Enforce(ctx context.Context, in *Resources, opts ...grpc.CallOption) (*Determine, error)
}

type authorityServiceClient struct {
	cc *grpc.ClientConn
}

func NewAuthorityServiceClient(cc *grpc.ClientConn) AuthorityServiceClient {
	return &authorityServiceClient{cc}
}

func (c *authorityServiceClient) GetAllRoles(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Array, error) {
	out := new(Array)
	err := c.cc.Invoke(ctx, "/AuthorityPb.AuthorityService/GetAllRoles", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authorityServiceClient) DeleteRole(ctx context.Context, in *Target, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/AuthorityPb.AuthorityService/DeleteRole", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authorityServiceClient) GetRolesForUser(ctx context.Context, in *Target, opts ...grpc.CallOption) (*Array, error) {
	out := new(Array)
	err := c.cc.Invoke(ctx, "/AuthorityPb.AuthorityService/GetRolesForUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authorityServiceClient) AddRolesForUser(ctx context.Context, in *Batch, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/AuthorityPb.AuthorityService/AddRolesForUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authorityServiceClient) HasRoleForUser(ctx context.Context, in *Single, opts ...grpc.CallOption) (*Determine, error) {
	out := new(Determine)
	err := c.cc.Invoke(ctx, "/AuthorityPb.AuthorityService/HasRoleForUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authorityServiceClient) DeleteRoleForUser(ctx context.Context, in *Single, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/AuthorityPb.AuthorityService/DeleteRoleForUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authorityServiceClient) DeleteUser(ctx context.Context, in *Single, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/AuthorityPb.AuthorityService/DeleteUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authorityServiceClient) DeleteRolesForUser(ctx context.Context, in *Single, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/AuthorityPb.AuthorityService/DeleteRolesForUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authorityServiceClient) GetUsersForRole(ctx context.Context, in *Single, opts ...grpc.CallOption) (*Array, error) {
	out := new(Array)
	err := c.cc.Invoke(ctx, "/AuthorityPb.AuthorityService/GetUsersForRole", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authorityServiceClient) AddPermissionForUser(ctx context.Context, in *Resources, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/AuthorityPb.AuthorityService/AddPermissionForUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authorityServiceClient) GetPermissionsForUser(ctx context.Context, in *Single, opts ...grpc.CallOption) (*Arrays, error) {
	out := new(Arrays)
	err := c.cc.Invoke(ctx, "/AuthorityPb.AuthorityService/GetPermissionsForUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authorityServiceClient) DeletePermissionForUser(ctx context.Context, in *Batch, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/AuthorityPb.AuthorityService/DeletePermissionForUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authorityServiceClient) DeletePermissionsForUser(ctx context.Context, in *Single, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/AuthorityPb.AuthorityService/DeletePermissionsForUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authorityServiceClient) DeletePermission(ctx context.Context, in *Array, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/AuthorityPb.AuthorityService/DeletePermission", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authorityServiceClient) HasPermissionForUser(ctx context.Context, in *Batch, opts ...grpc.CallOption) (*Determine, error) {
	out := new(Determine)
	err := c.cc.Invoke(ctx, "/AuthorityPb.AuthorityService/HasPermissionForUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authorityServiceClient) Enforce(ctx context.Context, in *Resources, opts ...grpc.CallOption) (*Determine, error) {
	out := new(Determine)
	err := c.cc.Invoke(ctx, "/AuthorityPb.AuthorityService/Enforce", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AuthorityServiceServer is the server API for AuthorityService service.
type AuthorityServiceServer interface {
	//  获取角色列表 全部
	GetAllRoles(context.Context, *Empty) (*Array, error)
	//  删除角色
	DeleteRole(context.Context, *Target) (*Empty, error)
	//  获取用户的所有角色
	GetRolesForUser(context.Context, *Target) (*Array, error)
	//  给用户批量添加角色
	AddRolesForUser(context.Context, *Batch) (*Empty, error)
	//  确定用户是否具有角色
	HasRoleForUser(context.Context, *Single) (*Determine, error)
	//  删除用户的指定角色
	DeleteRoleForUser(context.Context, *Single) (*Empty, error)
	//  删除用户
	DeleteUser(context.Context, *Single) (*Empty, error)
	//  删除用户的全部角色
	DeleteRolesForUser(context.Context, *Single) (*Empty, error)
	//  获取角色下的所有用户
	GetUsersForRole(context.Context, *Single) (*Array, error)
	//  给角色添加权限
	AddPermissionForUser(context.Context, *Resources) (*Empty, error)
	//  获取角色下全部权限
	GetPermissionsForUser(context.Context, *Single) (*Arrays, error)
	//  删除角色下的指定权限
	DeletePermissionForUser(context.Context, *Batch) (*Empty, error)
	//  删除角色的全部权限
	DeletePermissionsForUser(context.Context, *Single) (*Empty, error)
	//  删除权限
	DeletePermission(context.Context, *Array) (*Empty, error)
	//  判断角色是否有权限
	HasPermissionForUser(context.Context, *Batch) (*Determine, error)
	//  判断用户对资源有没有权限
	Enforce(context.Context, *Resources) (*Determine, error)
}

// UnimplementedAuthorityServiceServer can be embedded to have forward compatible implementations.
type UnimplementedAuthorityServiceServer struct {
}

func (*UnimplementedAuthorityServiceServer) GetAllRoles(ctx context.Context, req *Empty) (*Array, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllRoles not implemented")
}
func (*UnimplementedAuthorityServiceServer) DeleteRole(ctx context.Context, req *Target) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteRole not implemented")
}
func (*UnimplementedAuthorityServiceServer) GetRolesForUser(ctx context.Context, req *Target) (*Array, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRolesForUser not implemented")
}
func (*UnimplementedAuthorityServiceServer) AddRolesForUser(ctx context.Context, req *Batch) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddRolesForUser not implemented")
}
func (*UnimplementedAuthorityServiceServer) HasRoleForUser(ctx context.Context, req *Single) (*Determine, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HasRoleForUser not implemented")
}
func (*UnimplementedAuthorityServiceServer) DeleteRoleForUser(ctx context.Context, req *Single) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteRoleForUser not implemented")
}
func (*UnimplementedAuthorityServiceServer) DeleteUser(ctx context.Context, req *Single) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteUser not implemented")
}
func (*UnimplementedAuthorityServiceServer) DeleteRolesForUser(ctx context.Context, req *Single) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteRolesForUser not implemented")
}
func (*UnimplementedAuthorityServiceServer) GetUsersForRole(ctx context.Context, req *Single) (*Array, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUsersForRole not implemented")
}
func (*UnimplementedAuthorityServiceServer) AddPermissionForUser(ctx context.Context, req *Resources) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddPermissionForUser not implemented")
}
func (*UnimplementedAuthorityServiceServer) GetPermissionsForUser(ctx context.Context, req *Single) (*Arrays, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPermissionsForUser not implemented")
}
func (*UnimplementedAuthorityServiceServer) DeletePermissionForUser(ctx context.Context, req *Batch) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeletePermissionForUser not implemented")
}
func (*UnimplementedAuthorityServiceServer) DeletePermissionsForUser(ctx context.Context, req *Single) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeletePermissionsForUser not implemented")
}
func (*UnimplementedAuthorityServiceServer) DeletePermission(ctx context.Context, req *Array) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeletePermission not implemented")
}
func (*UnimplementedAuthorityServiceServer) HasPermissionForUser(ctx context.Context, req *Batch) (*Determine, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HasPermissionForUser not implemented")
}
func (*UnimplementedAuthorityServiceServer) Enforce(ctx context.Context, req *Resources) (*Determine, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Enforce not implemented")
}

func RegisterAuthorityServiceServer(s *grpc.Server, srv AuthorityServiceServer) {
	s.RegisterService(&_AuthorityService_serviceDesc, srv)
}

func _AuthorityService_GetAllRoles_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthorityServiceServer).GetAllRoles(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/AuthorityPb.AuthorityService/GetAllRoles",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthorityServiceServer).GetAllRoles(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthorityService_DeleteRole_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Target)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthorityServiceServer).DeleteRole(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/AuthorityPb.AuthorityService/DeleteRole",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthorityServiceServer).DeleteRole(ctx, req.(*Target))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthorityService_GetRolesForUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Target)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthorityServiceServer).GetRolesForUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/AuthorityPb.AuthorityService/GetRolesForUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthorityServiceServer).GetRolesForUser(ctx, req.(*Target))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthorityService_AddRolesForUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Batch)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthorityServiceServer).AddRolesForUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/AuthorityPb.AuthorityService/AddRolesForUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthorityServiceServer).AddRolesForUser(ctx, req.(*Batch))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthorityService_HasRoleForUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Single)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthorityServiceServer).HasRoleForUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/AuthorityPb.AuthorityService/HasRoleForUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthorityServiceServer).HasRoleForUser(ctx, req.(*Single))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthorityService_DeleteRoleForUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Single)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthorityServiceServer).DeleteRoleForUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/AuthorityPb.AuthorityService/DeleteRoleForUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthorityServiceServer).DeleteRoleForUser(ctx, req.(*Single))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthorityService_DeleteUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Single)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthorityServiceServer).DeleteUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/AuthorityPb.AuthorityService/DeleteUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthorityServiceServer).DeleteUser(ctx, req.(*Single))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthorityService_DeleteRolesForUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Single)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthorityServiceServer).DeleteRolesForUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/AuthorityPb.AuthorityService/DeleteRolesForUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthorityServiceServer).DeleteRolesForUser(ctx, req.(*Single))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthorityService_GetUsersForRole_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Single)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthorityServiceServer).GetUsersForRole(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/AuthorityPb.AuthorityService/GetUsersForRole",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthorityServiceServer).GetUsersForRole(ctx, req.(*Single))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthorityService_AddPermissionForUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Resources)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthorityServiceServer).AddPermissionForUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/AuthorityPb.AuthorityService/AddPermissionForUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthorityServiceServer).AddPermissionForUser(ctx, req.(*Resources))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthorityService_GetPermissionsForUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Single)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthorityServiceServer).GetPermissionsForUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/AuthorityPb.AuthorityService/GetPermissionsForUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthorityServiceServer).GetPermissionsForUser(ctx, req.(*Single))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthorityService_DeletePermissionForUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Batch)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthorityServiceServer).DeletePermissionForUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/AuthorityPb.AuthorityService/DeletePermissionForUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthorityServiceServer).DeletePermissionForUser(ctx, req.(*Batch))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthorityService_DeletePermissionsForUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Single)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthorityServiceServer).DeletePermissionsForUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/AuthorityPb.AuthorityService/DeletePermissionsForUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthorityServiceServer).DeletePermissionsForUser(ctx, req.(*Single))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthorityService_DeletePermission_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Array)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthorityServiceServer).DeletePermission(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/AuthorityPb.AuthorityService/DeletePermission",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthorityServiceServer).DeletePermission(ctx, req.(*Array))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthorityService_HasPermissionForUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Batch)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthorityServiceServer).HasPermissionForUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/AuthorityPb.AuthorityService/HasPermissionForUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthorityServiceServer).HasPermissionForUser(ctx, req.(*Batch))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthorityService_Enforce_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Resources)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthorityServiceServer).Enforce(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/AuthorityPb.AuthorityService/Enforce",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthorityServiceServer).Enforce(ctx, req.(*Resources))
	}
	return interceptor(ctx, in, info, handler)
}

var _AuthorityService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "AuthorityPb.AuthorityService",
	HandlerType: (*AuthorityServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetAllRoles",
			Handler:    _AuthorityService_GetAllRoles_Handler,
		},
		{
			MethodName: "DeleteRole",
			Handler:    _AuthorityService_DeleteRole_Handler,
		},
		{
			MethodName: "GetRolesForUser",
			Handler:    _AuthorityService_GetRolesForUser_Handler,
		},
		{
			MethodName: "AddRolesForUser",
			Handler:    _AuthorityService_AddRolesForUser_Handler,
		},
		{
			MethodName: "HasRoleForUser",
			Handler:    _AuthorityService_HasRoleForUser_Handler,
		},
		{
			MethodName: "DeleteRoleForUser",
			Handler:    _AuthorityService_DeleteRoleForUser_Handler,
		},
		{
			MethodName: "DeleteUser",
			Handler:    _AuthorityService_DeleteUser_Handler,
		},
		{
			MethodName: "DeleteRolesForUser",
			Handler:    _AuthorityService_DeleteRolesForUser_Handler,
		},
		{
			MethodName: "GetUsersForRole",
			Handler:    _AuthorityService_GetUsersForRole_Handler,
		},
		{
			MethodName: "AddPermissionForUser",
			Handler:    _AuthorityService_AddPermissionForUser_Handler,
		},
		{
			MethodName: "GetPermissionsForUser",
			Handler:    _AuthorityService_GetPermissionsForUser_Handler,
		},
		{
			MethodName: "DeletePermissionForUser",
			Handler:    _AuthorityService_DeletePermissionForUser_Handler,
		},
		{
			MethodName: "DeletePermissionsForUser",
			Handler:    _AuthorityService_DeletePermissionsForUser_Handler,
		},
		{
			MethodName: "DeletePermission",
			Handler:    _AuthorityService_DeletePermission_Handler,
		},
		{
			MethodName: "HasPermissionForUser",
			Handler:    _AuthorityService_HasPermissionForUser_Handler,
		},
		{
			MethodName: "Enforce",
			Handler:    _AuthorityService_Enforce_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "authority.proto",
}
