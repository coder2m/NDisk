// Code generated by protoc-gen-go. DO NOT EDIT.
// source: nfile.proto

package NFilePb

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type FileInfo struct {
	FileId               string   `protobuf:"bytes,1,opt,name=FileId,proto3" json:"FileId,omitempty"`
	Hash                 string   `protobuf:"bytes,2,opt,name=Hash,proto3" json:"Hash,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *FileInfo) Reset()         { *m = FileInfo{} }
func (m *FileInfo) String() string { return proto.CompactTextString(m) }
func (*FileInfo) ProtoMessage()    {}
func (*FileInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_4727c58bcafa2f2e, []int{0}
}

func (m *FileInfo) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_FileInfo.Unmarshal(m, b)
}
func (m *FileInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_FileInfo.Marshal(b, m, deterministic)
}
func (m *FileInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FileInfo.Merge(m, src)
}
func (m *FileInfo) XXX_Size() int {
	return xxx_messageInfo_FileInfo.Size(m)
}
func (m *FileInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_FileInfo.DiscardUnknown(m)
}

var xxx_messageInfo_FileInfo proto.InternalMessageInfo

func (m *FileInfo) GetFileId() string {
	if m != nil {
		return m.FileId
	}
	return ""
}

func (m *FileInfo) GetHash() string {
	if m != nil {
		return m.Hash
	}
	return ""
}

type FileData struct {
	Buffer               []byte   `protobuf:"bytes,1,opt,name=Buffer,proto3" json:"Buffer,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *FileData) Reset()         { *m = FileData{} }
func (m *FileData) String() string { return proto.CompactTextString(m) }
func (*FileData) ProtoMessage()    {}
func (*FileData) Descriptor() ([]byte, []int) {
	return fileDescriptor_4727c58bcafa2f2e, []int{1}
}

func (m *FileData) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_FileData.Unmarshal(m, b)
}
func (m *FileData) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_FileData.Marshal(b, m, deterministic)
}
func (m *FileData) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FileData.Merge(m, src)
}
func (m *FileData) XXX_Size() int {
	return xxx_messageInfo_FileData.Size(m)
}
func (m *FileData) XXX_DiscardUnknown() {
	xxx_messageInfo_FileData.DiscardUnknown(m)
}

var xxx_messageInfo_FileData proto.InternalMessageInfo

func (m *FileData) GetBuffer() []byte {
	if m != nil {
		return m.Buffer
	}
	return nil
}

func init() {
	proto.RegisterType((*FileInfo)(nil), "NFilePb.FileInfo")
	proto.RegisterType((*FileData)(nil), "NFilePb.FileData")
}

func init() { proto.RegisterFile("nfile.proto", fileDescriptor_4727c58bcafa2f2e) }

var fileDescriptor_4727c58bcafa2f2e = []byte{
	// 176 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0xe2, 0xce, 0x4b, 0xcb, 0xcc,
	0x49, 0xd5, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0x62, 0xf7, 0x73, 0xcb, 0xcc, 0x49, 0x0d, 0x48,
	0x52, 0x32, 0xe3, 0xe2, 0x00, 0xb1, 0x3c, 0xf3, 0xd2, 0xf2, 0x85, 0xc4, 0xb8, 0xd8, 0xc0, 0xec,
	0x14, 0x09, 0x46, 0x05, 0x46, 0x0d, 0xce, 0x20, 0x28, 0x4f, 0x48, 0x88, 0x8b, 0xc5, 0x23, 0xb1,
	0x38, 0x43, 0x82, 0x09, 0x2c, 0x0a, 0x66, 0x2b, 0x29, 0x41, 0xf4, 0xb9, 0x24, 0x96, 0x24, 0x82,
	0xf4, 0x39, 0x95, 0xa6, 0xa5, 0xa5, 0x16, 0x81, 0xf5, 0xf1, 0x04, 0x41, 0x79, 0x46, 0x0d, 0x8c,
	0x5c, 0x3c, 0x60, 0x7b, 0x82, 0x53, 0x8b, 0xca, 0x32, 0x93, 0x53, 0x85, 0xcc, 0xb8, 0xb8, 0x40,
	0xdc, 0xd0, 0x82, 0x9c, 0xfc, 0xc4, 0x14, 0x21, 0x41, 0x3d, 0xa8, 0x23, 0xf4, 0x60, 0x26, 0x49,
	0xa1, 0x0a, 0x81, 0x1c, 0xa5, 0xc4, 0xa0, 0xc1, 0x28, 0x64, 0xc1, 0xc5, 0x03, 0x56, 0x92, 0x5f,
	0x9e, 0x87, 0x45, 0x27, 0x48, 0x99, 0x14, 0xa6, 0x61, 0x4a, 0x0c, 0x06, 0x8c, 0x49, 0x6c, 0x60,
	0xef, 0x1a, 0x03, 0x02, 0x00, 0x00, 0xff, 0xff, 0x48, 0xaf, 0xe7, 0x48, 0xfd, 0x00, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// NFileServiceClient is the client API for NFileService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type NFileServiceClient interface {
	//文件上传
	FileUpload(ctx context.Context, opts ...grpc.CallOption) (NFileService_FileUploadClient, error)
	//文件下载
	FileDownload(ctx context.Context, in *FileInfo, opts ...grpc.CallOption) (NFileService_FileDownloadClient, error)
}

type nFileServiceClient struct {
	cc *grpc.ClientConn
}

func NewNFileServiceClient(cc *grpc.ClientConn) NFileServiceClient {
	return &nFileServiceClient{cc}
}

func (c *nFileServiceClient) FileUpload(ctx context.Context, opts ...grpc.CallOption) (NFileService_FileUploadClient, error) {
	stream, err := c.cc.NewStream(ctx, &_NFileService_serviceDesc.Streams[0], "/NFilePb.NFileService/FileUpload", opts...)
	if err != nil {
		return nil, err
	}
	x := &nFileServiceFileUploadClient{stream}
	return x, nil
}

type NFileService_FileUploadClient interface {
	Send(*FileData) error
	CloseAndRecv() (*FileInfo, error)
	grpc.ClientStream
}

type nFileServiceFileUploadClient struct {
	grpc.ClientStream
}

func (x *nFileServiceFileUploadClient) Send(m *FileData) error {
	return x.ClientStream.SendMsg(m)
}

func (x *nFileServiceFileUploadClient) CloseAndRecv() (*FileInfo, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(FileInfo)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *nFileServiceClient) FileDownload(ctx context.Context, in *FileInfo, opts ...grpc.CallOption) (NFileService_FileDownloadClient, error) {
	stream, err := c.cc.NewStream(ctx, &_NFileService_serviceDesc.Streams[1], "/NFilePb.NFileService/FileDownload", opts...)
	if err != nil {
		return nil, err
	}
	x := &nFileServiceFileDownloadClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type NFileService_FileDownloadClient interface {
	Recv() (*FileData, error)
	grpc.ClientStream
}

type nFileServiceFileDownloadClient struct {
	grpc.ClientStream
}

func (x *nFileServiceFileDownloadClient) Recv() (*FileData, error) {
	m := new(FileData)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// NFileServiceServer is the server API for NFileService service.
type NFileServiceServer interface {
	//文件上传
	FileUpload(NFileService_FileUploadServer) error
	//文件下载
	FileDownload(*FileInfo, NFileService_FileDownloadServer) error
}

// UnimplementedNFileServiceServer can be embedded to have forward compatible implementations.
type UnimplementedNFileServiceServer struct {
}

func (*UnimplementedNFileServiceServer) FileUpload(srv NFileService_FileUploadServer) error {
	return status.Errorf(codes.Unimplemented, "method FileUpload not implemented")
}
func (*UnimplementedNFileServiceServer) FileDownload(req *FileInfo, srv NFileService_FileDownloadServer) error {
	return status.Errorf(codes.Unimplemented, "method FileDownload not implemented")
}

func RegisterNFileServiceServer(s *grpc.Server, srv NFileServiceServer) {
	s.RegisterService(&_NFileService_serviceDesc, srv)
}

func _NFileService_FileUpload_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(NFileServiceServer).FileUpload(&nFileServiceFileUploadServer{stream})
}

type NFileService_FileUploadServer interface {
	SendAndClose(*FileInfo) error
	Recv() (*FileData, error)
	grpc.ServerStream
}

type nFileServiceFileUploadServer struct {
	grpc.ServerStream
}

func (x *nFileServiceFileUploadServer) SendAndClose(m *FileInfo) error {
	return x.ServerStream.SendMsg(m)
}

func (x *nFileServiceFileUploadServer) Recv() (*FileData, error) {
	m := new(FileData)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _NFileService_FileDownload_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(FileInfo)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(NFileServiceServer).FileDownload(m, &nFileServiceFileDownloadServer{stream})
}

type NFileService_FileDownloadServer interface {
	Send(*FileData) error
	grpc.ServerStream
}

type nFileServiceFileDownloadServer struct {
	grpc.ServerStream
}

func (x *nFileServiceFileDownloadServer) Send(m *FileData) error {
	return x.ServerStream.SendMsg(m)
}

var _NFileService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "NFilePb.NFileService",
	HandlerType: (*NFileServiceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "FileUpload",
			Handler:       _NFileService_FileUpload_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "FileDownload",
			Handler:       _NFileService_FileDownload_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "nfile.proto",
}
